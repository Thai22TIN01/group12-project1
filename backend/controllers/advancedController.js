const User = require("../models/User");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const cloudinary = require("../config/cloudinary");

// üü¢ Qu√™n m·∫≠t kh·∫©u
exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "10m" });
    const resetLink = `http://localhost:3000/reset-password/${token}`;

    // G·ª≠i email
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS },
    });

    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Kh√¥i ph·ª•c m·∫≠t kh·∫©u",
      html: `<p>Nh·∫•n v√†o link sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p><a href="${resetLink}">${resetLink}</a>`,
    });

    res.json({ message: "ƒê√£ g·ª≠i link reset password t·ªõi email!" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// üü¢ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
exports.resetPassword = async (req, res) => {
  try {
    const { token, newPassword } = req.body;
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const hash = await bcrypt.hash(newPassword, 10);
    await User.findByIdAndUpdate(decoded.id, { password: hash });
    res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (err) {
    res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
  }
};

// üü¢ Upload avatar
exports.uploadAvatar = async (req, res) => {
  try {
    const file = req.file;
    const uploadResult = await cloudinary.uploader.upload(file.path, { folder: "avatars" });
    const user = await User.findByIdAndUpdate(req.user.id, { avatar: uploadResult.secure_url }, { new: true });
    res.json({ message: "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng!", avatar: user.avatar });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
